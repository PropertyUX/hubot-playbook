{"version":3,"sources":["../../src/modules/base.js"],"names":["Base","name","robot","isString","error","isObject","config","args","configure","shift","key","id","uniqueId","err","text","Error","emit","options","defaults","settings","event","callback","on","instance","logger"],"mappings":"AAAA,a;;AAEA,gC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BMA,I;AACJ,gBAAaC,IAAb,EAAmBC,KAAnB,EAAmC;AACjC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,QAAI,CAAC,iBAAEC,QAAF,CAAW,KAAKF,IAAhB,CAAL,EAA4B,KAAKG,KAAL,CAAW,wBAAX;AAC5B,QAAI,CAAC,iBAAEC,QAAF,CAAW,KAAKH,KAAhB,CAAL,EAA6B,KAAKE,KAAL,CAAW,gCAAX;;AAE7B,SAAKE,MAAL,GAAc,EAAd,CANiC,kCAANC,IAAM,mEAANA,IAAM;AAOjC,QAAI,iBAAEF,QAAF,CAAWE,KAAK,CAAL,CAAX,CAAJ,EAAyB,KAAKC,SAAL,CAAeD,KAAKE,KAAL,EAAf;AACzB,QAAI,iBAAEN,QAAF,CAAWI,KAAK,CAAL,CAAX,CAAJ,EAAyB,KAAKG,GAAL,GAAWH,KAAKE,KAAL,EAAX;AACzB,SAAKE,EAAL,GAAU,iBAAEC,QAAF,CAAW,KAAKX,IAAhB,CAAV;AACD;;AAED;;;;;;;;;AASA;;;;;AAKOY,O,EAAK;AACV,UAAI,iBAAEV,QAAF,CAAWU,GAAX,CAAJ,EAAqB;AACnB,YAAMC,QAAU,KAAKH,EAAL,IAAW,aAArB,WAAuCE,GAA7C;AACAA,cAAM,IAAIE,KAAJ,CAAUD,IAAV,CAAN;AACD;AACD,UAAI,KAAKZ,KAAL,IAAc,IAAlB,EAAwB,KAAKA,KAAL,CAAWc,IAAX,CAAgB,OAAhB,EAAyBH,GAAzB;AACxB,YAAMA,GAAN;AACD;;AAED;;;;;;;;;AASWI,W,EAAS;AAClB,UAAI,CAAC,iBAAEZ,QAAF,CAAWY,OAAX,CAAL,EAA0B,KAAKb,KAAL,CAAW,gCAAX;AAC1B,WAAKE,MAAL,GAAc,iBAAEY,QAAF,CAAW,EAAX,EAAeD,OAAf,EAAwB,KAAKX,MAA7B,CAAd;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;AASUa,Y,EAAU;AAClB,UAAI,CAAC,iBAAEd,QAAF,CAAWc,QAAX,CAAL,EAA2B,KAAKf,KAAL,CAAW,kCAAX;AAC3B,WAAKE,MAAL,GAAc,iBAAEY,QAAF,CAAW,EAAX,EAAe,KAAKZ,MAApB,EAA4Ba,QAA5B,CAAd;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;AAQMC,S,EAAgB,+CAANb,IAAM,yEAANA,IAAM;AACpB,qBAAKL,KAAL,EAAWc,IAAX,gBAAgBI,KAAhB,EAAuB,IAAvB,SAAgCb,IAAhC;AACD;;AAED;;;;;;AAMIa,S,EAAOC,Q,EAAU;AACnB,WAAKnB,KAAL,CAAWoB,EAAX,CAAcF,KAAd,EAAqB,UAACG,QAAD,EAAuB,oCAAThB,IAAS,yEAATA,IAAS;AAC1C,YAAI,UAASgB,QAAb,EAAuBF,0BAAYd,IAAZ,EADmB,CACD;AAC1C,OAFD;AAGD,K,sCAtEU,CACT,OAAO,KAAKL,KAAL,GAAa,KAAKA,KAAL,CAAWsB,MAAxB,GAAiC,IAAxC,CACD,C;;;AAuEYxB,I","file":"base.js","sourcesContent":["'use strict'\n\nimport _ from 'lodash'\n\n/**\n * Base is the parent class of every Playbook module, providing consistent\n * structure and behaviour.\n *\n * Every module built on Base can emit events, handle errors and call methods\n * through the bot.\n *\n * Helpers are provided to accept options and merge with class defaults to\n * configure the instance.\n *\n * All instances get a unique ID and can be given a named key so any interaction\n * or event can be queried and recorded against its source.\n *\n * @param {string} name      The module/class name\n * @param {Robot}  robot     Robot instance\n * @param {Object} [options] Key/val options for config\n * @param {string} [key]     Key name for instance (provided to events)\n *\n * @example\n * class RadModule extends Base {\n *   constructor (robot, args...) {\n *     super('rad', robot, args...)\n *   }\n * }\n * radOne = new RadModule(robot, { radness: 'high' })\n * radOne.id // == 'rad_1'\n * radOne.config.radness // == 'high'\n*/\nclass Base {\n  constructor (name, robot, ...args) {\n    this.name = name\n    this.robot = robot\n    if (!_.isString(this.name)) this.error('Module requires a name')\n    if (!_.isObject(this.robot)) this.error('Module requires a robot object')\n\n    this.config = {}\n    if (_.isObject(args[0])) this.configure(args.shift())\n    if (_.isString(args[0])) this.key = args.shift()\n    this.id = _.uniqueId(this.name)\n  }\n\n  /**\n   * Getter allows robot to be replaced at runtime without losing route to log.\n   *\n   * @return {Object} The robot's log instance\n   */\n  get log () {\n    return this.robot ? this.robot.logger : null\n  }\n\n  /**\n   * Generic error handling, logs and emits event before throwing.\n   *\n   * @param {Error/string} err Error object or description of error\n  */\n  error (err) {\n    if (_.isString(err)) {\n      const text = `${this.id || 'constructor'}: ${err}`\n      err = new Error(text)\n    }\n    if (this.robot != null) this.robot.emit('error', err)\n    throw err\n  }\n\n  /**\n   * Merge-in passed options, override any that exist in config.\n   *\n   * @param  {Object} options Key/vals to merge with existing config\n   * @return {Base}           Self for chaining\n   *\n   * @example\n   * radOne.configure({ radness: 'overload' }) // overwrites initial config\n  */\n  configure (options) {\n    if (!_.isObject(options)) this.error('Non-object received for config')\n    this.config = _.defaults({}, options, this.config)\n    return this\n  }\n\n  /**\n   * Fill any missing settings without overriding any existing in config.\n   *\n   * @param  {Object} settings Key/vals to use as config fallbacks\n   * @return {Base}            Self for chaining\n   *\n   * @example\n   * radOne.defaults({ radness: 'meh' }) // applies unless configured otherwise\n   */\n  defaults (settings) {\n    if (!_.isObject(settings)) this.error('Non-object received for defaults')\n    this.config = _.defaults({}, this.config, settings)\n    return this\n  }\n\n  /**\n   * Emit events using robot's event emmitter, allows listening from any module.\n   *\n   * Prepends the instance to event args, so listens can be implicitly targeted.\n   *\n   * @param {string} event Name of event\n   * @param {...*} [args]  Arguments passed to event\n  */\n  emit (event, ...args) {\n    this.robot.emit(event, this, ...args)\n  }\n\n  /**\n   * Fire callback on robot events if event ID arguement matches this instance.\n   *\n   * @param {string}   event    Name of event\n   * @param {Function} callback Function to call\n  */\n  on (event, callback) {\n    this.robot.on(event, (instance, ...args) => {\n      if (this === instance) callback(...args) // eslint-disable-line\n    })\n  }\n}\n\nexport default Base\n"]}