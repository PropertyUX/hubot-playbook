{"version":3,"sources":["../../src/modules/base.js"],"names":["Base","constructor","name","robot","args","isString","error","isObject","config","configure","shift","key","log","logger","id","uniqueId","err","text","Error","emit","options","defaultsDeep","defaults","settings","event","on","callback","instance"],"mappings":"2EAAA,gC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMA,IAAN,CAAW;AACTC,cAAaC,IAAb,EAAmBC,KAAnB,EAA0B,GAAGC,IAA7B,EAAmC;AACjC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,QAAI,CAAC,iBAAEE,QAAF,CAAW,KAAKH,IAAhB,CAAL,EAA4B,KAAKI,KAAL,CAAW,wBAAX;AAC5B,QAAI,CAAC,iBAAEC,QAAF,CAAW,KAAKJ,KAAhB,CAAL,EAA6B,KAAKG,KAAL,CAAW,gCAAX;;AAE7B,SAAKE,MAAL,GAAc,EAAd;AACA,QAAI,iBAAED,QAAF,CAAWH,KAAK,CAAL,CAAX,CAAJ,EAAyB,KAAKK,SAAL,CAAeL,KAAKM,KAAL,EAAf;AACzB,QAAI,iBAAEL,QAAF,CAAWD,KAAK,CAAL,CAAX,CAAJ,EAAyB,KAAKO,GAAL,GAAWP,KAAKM,KAAL,EAAX;AACzB,SAAKE,GAAL,GAAW,KAAKT,KAAL,CAAWU,MAAtB;AACA,SAAKC,EAAL,GAAU,iBAAEC,QAAF,CAAW,KAAKb,IAAhB,CAAV;AACD;;AAED;;;;;AAKAI,QAAOU,GAAP,EAAY;AACV,QAAI,iBAAEX,QAAF,CAAWW,GAAX,CAAJ,EAAqB;AACnB,YAAMC,OAAQ,GAAE,KAAKH,EAAL,IAAW,aAAc,KAAIE,GAAI,EAAjD;AACAA,YAAM,IAAIE,KAAJ,CAAUD,IAAV,CAAN;AACD;AACD,QAAI,KAAKd,KAAL,IAAc,IAAlB,EAAwB,KAAKA,KAAL,CAAWgB,IAAX,CAAgB,OAAhB,EAAyBH,GAAzB;AACxB,UAAMA,GAAN;AACD;;AAED;;;;;;;;;AASAP,YAAWW,OAAX,EAAoB;AAClB,QAAI,CAAC,iBAAEb,QAAF,CAAWa,OAAX,CAAL,EAA0B,KAAKd,KAAL,CAAW,gCAAX;AAC1B,SAAKE,MAAL,GAAc,iBAAEa,YAAF,CAAe,EAAf,EAAmBD,OAAnB,EAA4B,KAAKZ,MAAjC,CAAd;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;;AASAc,WAAUC,QAAV,EAAoB;AAClB,QAAI,CAAC,iBAAEhB,QAAF,CAAWgB,QAAX,CAAL,EAA2B,KAAKjB,KAAL,CAAW,kCAAX;AAC3B,SAAKE,MAAL,GAAc,iBAAEa,YAAF,CAAe,EAAf,EAAmB,KAAKb,MAAxB,EAAgCe,QAAhC,CAAd;AACA,WAAO,IAAP;AACD;;AAED;;;;;;;;AAQAJ,OAAMK,KAAN,EAAa,GAAGpB,IAAhB,EAAsB;AACpB,SAAKD,KAAL,CAAWgB,IAAX,CAAgBK,KAAhB,EAAuB,IAAvB,EAA6B,GAAGpB,IAAhC;AACD;;AAED;;;;;;AAMAqB,KAAID,KAAJ,EAAWE,QAAX,EAAqB;AACnB,SAAKvB,KAAL,CAAWsB,EAAX,CAAcD,KAAd,EAAqB,CAACG,QAAD,EAAW,GAAGvB,IAAd,KAAuB;AAC1C,UAAIuB,aAAa,IAAjB,EAAuBD,SAASC,QAAT,EAAmB,GAAGvB,IAAtB;AACxB,KAFD;AAGD,GAhFQ,C;;;AAmFIJ,I","file":"base.js","sourcesContent":["import _ from 'lodash'\n\n/**\n * Provides common structure and behaviour inherited by all Playbook modules.\n *\n * Includes unique ID, error handling, event routing and accepts options and\n * named key as final arguments (inherited config is merged with options).\n *\n * The named key allows modules to be identified outside of functional logic,\n * for instance if they create listeners or logs or DB entries, they will attach\n * their key as a signature to ID which specific instance it was.\n *\n * @param {string} name      The module/class name\n * @param {Robot}  robot     Robot instance\n * @param {Object} [options] Key/val options for config\n * @param {string} [key]     Key name for instance\n *\n * @example\n * class RadModule extends Base {\n *   constructor (robot, args...) {\n *     super('rad', robot, args...)\n *   }\n * }\n * radOne = new RadModule(robot, { radness: 'high' })\n * radOne.id // == 'rad_1'\n * radOne.config.radness // == 'high'\n*/\nclass Base {\n  constructor (name, robot, ...args) {\n    this.name = name\n    this.robot = robot\n    if (!_.isString(this.name)) this.error('Module requires a name')\n    if (!_.isObject(this.robot)) this.error('Module requires a robot object')\n\n    this.config = {}\n    if (_.isObject(args[0])) this.configure(args.shift())\n    if (_.isString(args[0])) this.key = args.shift()\n    this.log = this.robot.logger\n    this.id = _.uniqueId(this.name)\n  }\n\n  /**\n   * Generic error handling, logs and emits event before throwing.\n   *\n   * @param {Error/string} err Error object or description of error\n  */\n  error (err) {\n    if (_.isString(err)) {\n      const text = `${this.id || 'constructor'}: ${err}`\n      err = new Error(text)\n    }\n    if (this.robot != null) this.robot.emit('error', err)\n    throw err\n  }\n\n  /**\n   * Merge-in passed options, override any that exist in config.\n   *\n   * @param  {Object} options Key/vals to merge with existing config\n   * @return {Base}           Self for chaining\n   *\n   * @example\n   * radOne.configure({ radness: 'overload' }) // overwrites initial config\n  */\n  configure (options) {\n    if (!_.isObject(options)) this.error('Non-object received for config')\n    this.config = _.defaultsDeep({}, options, this.config)\n    return this\n  }\n\n  /**\n   * Fill any missing settings without overriding any existing in config.\n   *\n   * @param  {Object} settings Key/vals to use as config fallbacks\n   * @return {Base}            Self for chaining\n   *\n   * @example\n   * radOne.defaults({ radness: 'meh' }) // applies unless configured otherwise\n   */\n  defaults (settings) {\n    if (!_.isObject(settings)) this.error('Non-object received for defaults')\n    this.config = _.defaultsDeep({}, this.config, settings)\n    return this\n  }\n\n  /**\n   * Emit events using robot's event emmitter, allows listening from any module.\n   *\n   * Prepends instance's unique ID, so event listens can be implicitly targeted.\n   *\n   * @param {string} event Name of event\n   * @param {...*} [args]  Arguments passed to event\n  */\n  emit (event, ...args) {\n    this.robot.emit(event, this, ...args)\n  }\n\n  /**\n   * Fire callback on robot events if event ID arguement matches this instance.\n   *\n   * @param {string}   event    Name of event\n   * @param {Function} callback Function to call\n  */\n  on (event, callback) {\n    this.robot.on(event, (instance, ...args) => {\n      if (instance === this) callback(instance, ...args)\n    })\n  }\n}\n\nexport default Base\n"]}