{"version":3,"sources":["../../src/modules/director.js"],"names":["Director","robot","args","authArg","isFunction","shift","defaults","type","scope","deniedReply","process","env","DENIED_REPLY","authorise","includes","config","error","log","info","id","listEnv","toUpperCase","names","split","toString","union","castArray","without","res","name","message","user","room","allowed","isAllowed","text","debug","emit","reply","regex","listenerMiddleware","context","next","done","response","isMatch","match","isDenied","finish","listener","options","scene","directListener","hook","pre","preempt","module","exports"],"mappings":"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","file":"director.js","sourcesContent":["'use strict'\n\nimport _ from 'lodash'\nimport Base from './base'\nimport hooker from 'hooker'\n\n/**\n * Directors provide conversation firewalls, allowing listed users to be\n * authorised or blocked from entering scenes or preventing listeners from\n * firing.\n *\n * Access is determined by blacklist or whitelist, or if defined, a custom\n * fallback function can determine to allow or deny anyone not on the list.\n *\n * A director can be attached to whole scenes or dialogues, or even specific\n * listeners.\n *\n * _Authorise_ function is given the user or room name (depending on the scope\n * configured for the direcrot) and response object. It must return a boolean to\n * determine access.\n *\n * `config.deniedReply` can be set globally with environment var `DENIED_REPLY`\n *\n * Environment vars can also provide global default lists:\n * - `WHITELIST_USERNAMES` for whitelist type and username scope directors\n * - `WHITELIST_ROOMS` for whitelist type and room scope directors\n * - `BLACKLIST_USERNAMES` for blacklist type and username scope directors\n * - `BLACKLIST_ROOMS` for blacklist type and room scope directors\n *\n * @param {Robot}    robot               Hubot Robot instance\n * @param {Function} [authorise]         Function to determine access (as fallback)\n * @param {Object} [options]             Key/val options for config\n * @param {string} [options.type]        `'whitelist'` (default) or `'blacklist'`\n * @param {string} [options.deniedReply] Sent when denied access\n * @param {string} [key]                 Key name for this instance\n *\n *\n * @example <caption>check if user has a particular role in platform</caption>\n * let adminsOnly = new Director(robot, (username) => {\n *   return chatPlatform.userHasPermission(username, 'admin')\n * })\n * // ...when directing a scene, will only allow platform admins to enter.\n*/\nclass Director extends Base {\n  constructor (robot, ...args) {\n    let authArg = _.isFunction(args[0]) ? args.shift() : null\n    super('director', robot, ...args)\n    this.defaults({\n      type: 'whitelist',\n      scope: 'username',\n      deniedReply: process.env.DENIED_REPLY || \"Sorry, I can't do that.\"\n    })\n    this.authorise = authArg\n\n    if (!_.includes(['whitelist', 'blacklist'], this.config.type)) this.error('Invalid type')\n    if (!_.includes(['username', 'room'], this.config.scope)) this.error('Invalid scope')\n    this.log.info(`New ${this.config.scope} Director ${this.config.type}: ${this.id}`)\n\n    const listEnv = this.config.type.toUpperCase()\n    switch (this.config.scope) {\n      case 'username': this.names = process.env[`${listEnv}_USERNAMES`]\n        break\n      case 'room': this.names = process.env[`${listEnv}_ROOMS`]\n    }\n    if (this.names != null) this.names = this.names.split(',')\n    if (this.names == null) this.names = []\n  }\n\n  /**\n   * Add new usernames/rooms to list.\n   *\n   * @param  {string/array} names Usernames or Room names (depending on scope)\n   * @return {Director}           Self, for chaining methods\n  */\n  add (names) {\n    this.log.info(`Adding ${names.toString()} to ${this.id} ${this.config.type}`)\n    this.names = _.union(this.names, _.castArray(names))\n    return this\n  }\n\n  /**\n   * Remove new usernames/rooms from list.\n   *\n   * @param  {string/array} names Usernames or Room names (depending on scope)\n   * @return {Director}           Self, for chaining methods\n  */\n  remove (names) {\n    this.log.info(`Removing ${names.toString()} from ${this.id} ${this.config.type}`)\n    this.names = _.without(this.names, ..._.castArray(names))\n    return this\n  }\n\n  /**\n   * Determine if user has access, checking usernames/rooms against lists.\n   *\n   * _Blacklist_ blocks names on list, let anyone else through. _Whitelist_ lets\n   * names on list through, block anyone else. Whitelist is default behaviour.\n   *\n   * @param  {Response} res Hubot Response object\n   * @return {boolean}      Access allowed\n   *\n   * @example <caption>assumes res1, res2 are valid Response objects</caption>\n   * let noHomers = new Director(robot, { type: 'blacklist' }).add('homer')\n   * res1.message.user.name = 'homer'\n   * res2.message.user.name = 'marge'\n   * noHomers.isAllowed(res1) // false\n   * noHomers.isAllowed(res2) // true\n  */\n  isAllowed (res) {\n    let name\n    switch (this.config.scope) {\n      case 'username': name = res.message.user.name\n        break\n      case 'room': name = res.message.room\n    }\n\n    if (this.config.type === 'blacklist') {\n      if (_.includes(this.names, name)) return false\n      if (this.authorise == null) return true\n    } else {\n      if (_.includes(this.names, name)) return true\n      if (this.authorise == null) return false\n    }\n    return this.authorise(name, res)\n  }\n\n  /**\n   * Process access or denial (either silently or with reply, as configured).\n   *\n   * @param  {Response} res Hubot Response object\n   * @return {boolean}      Access allowed\n  */\n  process (res) {\n    const allowed = this.isAllowed(res)\n    const user = res.message.user.name\n    const message = res.message.text\n    if (allowed) {\n      this.log.debug(`${this.id} allowed ${user} on receiving ${message}`)\n      this.emit('allow', res)\n      return true\n    } else {\n      this.log.info(`${this.id} denied ${user} on receiving: ${message}`)\n      this.emit('deny', res)\n      if (!_.includes(['', null], this.config.deniedReply)) res.reply(this.config.deniedReply)\n      return false\n    }\n  }\n\n  /**\n   * Let this director control access to any listener matching regex.\n   *\n   * @param  {Regex}  regex - Listener match pattern\n   * @return {Director}     - Self, for chaining methods\n  */\n  directMatch (regex) {\n    this.log.info(`${this.id} now controlling access to listeners matching ${regex}`)\n    this.robot.listenerMiddleware((context, next, done) => {\n      const res = context.response\n      const isMatch = res.message.text.match(regex)\n      const isDenied = !this.process(res)\n      if (isMatch && isDenied) {\n        res.message.finish() // don't process this message further\n        return done() // don't process further middleware\n      }\n      return next(done)\n    }) // nothing matched or user allowed\n    return this\n  }\n\n  /**\n   * Let this director control access to a listener by listener or scene ID.\n   *\n   * If multiple listeners use the same ID, it's assumed to deny all of them.\n   *\n   * @param  {string}   id Listener ID (may be multiple for scene)\n   * @return {Director}    Self, for chaining methods\n  */\n  directListener (id) {\n    this.log.info(`Director ${this.id} now controlling access to listener ${id}`)\n    this.robot.listenerMiddleware((context, next, done) => {\n      const res = context.response\n      const isMatch = context.listener.options.id === id\n      const isDenied = !this.process(res)\n      if (isMatch && isDenied) {\n        context.response.message.finish() // don't process this message further\n        return done() // don't process further middleware\n      }\n      return next(done)\n    }) // nothing matched or user allowed\n    return this\n  }\n\n  /**\n   * Let this director control access to a given scene's listener.\n   *\n   * Also hooks into `Scene.enter` to control access to manually entered scenes.\n   *\n   * @param  {Scene} scene The Scene instance\n   * @return {Director}    Self, for chaining methods\n   * @todo Replace hooker usage with custom middleware on scene enter.\n   * e.g. https://gist.github.com/darrenscerri/5c3b3dcbe4d370435cfa\n  */\n  directScene (scene) {\n    this.log.info(`${this.id} now controlling ${scene.id}`)\n    this.directListener(scene.id) //  to control scene's listeners\n    hooker.hook(scene, 'enter', {\n      pre: res => {\n        if (!this.process(res)) return hooker.preempt(false)\n      }\n    })\n    return this\n  }\n}\n\nmodule.exports = Director\n"]}