{"version":3,"sources":["../../src/modules/director.js"],"names":["Director","constructor","robot","args","authArg","isFunction","shift","defaults","type","scope","deniedReply","process","env","DENIED_REPLY","authorise","includes","config","error","log","info","id","listEnv","toUpperCase","names","split","add","toString","union","castArray","remove","without","isAllowed","res","name","message","user","room","_process","allowed","text","debug","emit","reply","directMatch","regex","listenerMiddleware","context","next","done","response","isMatch","match","isDenied","finish","directListener","listener","options","directScene","scene","hook","pre","preempt","module","exports"],"mappings":"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","file":"director.js","sourcesContent":["import _ from 'lodash'\nimport Base from './Base'\nimport hooker from 'hooker'\n\n/**\n * Controls listeners and access to a scene (via audience blacklist/whitelist).\n *\n * Can use an `authorise` property (function) to allow or deny, as fallback for\n * anyone not on the list. Authorise callback is given the user or room name and\n * response object. Must return boolean to determine access.\n *\n * @param {Robot}    robot               Hubot Robot instance\n * @param {Function} [authorise]         Function to determine access (as fallback)\n * @param {Object} [options]             Key/val options for config\n * @param {string} [options.type]        `'whitelist'` (default) or `'blacklist'`\n * @param {string} [options.deniedReply] Sent when denied access\n * @param {string} [key]                 Key name for this instance\n *\n *\n * @example <caption>check if user has a particular role in platform</caption>\n * let adminsOnly = new Director(robot, (username) => {\n *   return chatPlatform.userHasPermission(username, 'admin')\n * })\n * // ...when directing a scene, will only allow platform admins to enter.\n*/\nclass Director extends Base {\n  /**\n   * `config.deniedReply` can be set globally with environment var `DENIED_REPLY`\n   *\n   * Environment vars can also provide global default lists:\n   * - `WHITELIST_USERNAMES` for whitelist type and username scope directors\n   * - `WHITELIST_ROOMS` for whitelist type and room scope directors\n   * - `BLACKLIST_USERNAMES` for blacklist type and username scope directors\n   * - `BLACKLIST_ROOMS` for blacklist type and room scope directors\n   */\n  constructor (robot, ...args) {\n    let authArg = _.isFunction(args[0]) ? args.shift() : null\n    super('director', robot, ...args)\n    this.defaults({\n      type: 'whitelist',\n      scope: 'username',\n      deniedReply: process.env.DENIED_REPLY || \"Sorry, I can't do that.\"\n    })\n    this.authorise = authArg\n\n    if (!['whitelist', 'blacklist'].includes(this.config.type)) this.error('Invalid type')\n    if (!['username', 'room'].includes(this.config.scope)) this.error('Invalid scope')\n    this.log.info(`New ${this.config.scope} Director ${this.config.type}: ${this.id}`)\n\n    const listEnv = this.config.type.toUpperCase()\n    switch (this.config.scope) {\n      case 'username': this.names = process.env[`${listEnv}_USERNAMES`]\n        break\n      case 'room': this.names = process.env[`${listEnv}_ROOMS`]\n    }\n    if (this.names != null) this.names = this.names.split(',')\n    if (this.names == null) this.names = []\n  }\n\n  /**\n   * Add new usernames/rooms to list.\n   *\n   * @param  {string/array} names Usernames or Room names (depending on scope)\n   * @return {Director}           Self, for chaining methods\n  */\n  add (names) {\n    this.log.info(`Adding ${names.toString()} to ${this.id} ${this.config.type}`)\n    this.names = _.union(this.names, _.castArray(names))\n    return this\n  }\n\n  /**\n   * Remove new usernames/rooms from list.\n   *\n   * @param  {string/array} names Usernames or Room names (depending on scope)\n   * @return {Director}           Self, for chaining methods\n  */\n  remove (names) {\n    this.log.info(`Removing ${names.toString()} from ${this.id} ${this.config.type}`)\n    this.names = _.without(this.names, ..._.castArray(names))\n    return this\n  }\n\n  /**\n   * Determine if user has access, checking usernames/rooms against lists.\n   *\n   * _Blacklist_ blocks names on list, let anyone else through. _Whitelist_ lets\n   * names on list through, block anyone else. Whitelist is default behaviour.\n   *\n   * @param  {Response} res Hubot Response object\n   * @return {boolean}      Access allowed\n   *\n   * @example <caption>assumes res1, res2 are valid Response objects</caption>\n   * let noHomers = new Director(robot, { type: 'blacklist' }).add('homer')\n   * res1.message.user.name = 'homer'\n   * res2.message.user.name = 'marge'\n   * noHomers.isAllowed(res1) // false\n   * noHomers.isAllowed(res2) // true\n  */\n  isAllowed (res) {\n    let name\n    switch (this.config.scope) {\n      case 'username': name = res.message.user.name\n        break\n      case 'room': name = res.message.room\n    }\n\n    if (this.config.type === 'blacklist') {\n      if (this.names.includes(name)) return false\n      if (this.authorise == null) return true\n    } else {\n      if (this.names.includes(name)) return true\n      if (this.authorise == null) return false\n    }\n    return this.authorise(name, res)\n  }\n\n  /**\n   * Process access or denial (either silently or with reply, as configured).\n   *\n   * @param  {Response} res Hubot Response object\n   * @return {boolean}      Access allowed\n  */\n  _process (res) {\n    const allowed = this.isAllowed(res)\n    const user = res.message.user.name\n    const message = res.message.text\n    if (allowed) {\n      this.log.debug(`${this.id} allowed ${user} on receiving ${message}`)\n      this.emit('allow', res)\n      return true\n    } else {\n      this.log.info(`${this.id} denied ${user} on receiving: ${message}`)\n      this.emit('deny', res)\n      if (!['', null].includes(this.config.deniedReply)) res.reply(this.config.deniedReply)\n      return false\n    }\n  }\n\n  /**\n   * Let this director control access to any listener matching regex.\n   *\n   * @param  {Regex}  regex - Listener match pattern\n   * @return {Director}     - Self, for chaining methods\n  */\n  directMatch (regex) {\n    this.log.info(`${this.id} now controlling access to listeners matching ${regex}`)\n    this.robot.listenerMiddleware((context, next, done) => {\n      const res = context.response\n      const isMatch = res.message.text.match(regex)\n      const isDenied = !this._process(res)\n      if (isMatch && isDenied) {\n        res.message.finish() // don't process this message further\n        return done() // don't process further middleware\n      }\n      return next(done)\n    }) // nothing matched or user allowed\n    return this\n  }\n\n  /**\n   * Let this director control access to a listener by listener or scene ID.\n   *\n   * If multiple listeners use the same ID, it's assumed to deny all of them.\n   *\n   * @param  {string}   id Listener ID (may be multiple for scene)\n   * @return {Director}    Self, for chaining methods\n  */\n  directListener (id) {\n    this.log.info(`Director ${this.id} now controlling access to listener ${id}`)\n    this.robot.listenerMiddleware((context, next, done) => {\n      const res = context.response\n      const isMatch = context.listener.options.id === id\n      const isDenied = !this._process(res)\n      if (isMatch && isDenied) {\n        context.response.message.finish() // don't process this message further\n        return done() // don't process further middleware\n      }\n      return next(done)\n    }) // nothing matched or user allowed\n    return this\n  }\n\n  /**\n   * Let this director control access to a given scene's listener.\n   *\n   * Also hooks into `Scene.enter` to control access to manually entered scenes.\n   *\n   * @param  {Scene} scene The Scene instance\n   * @return {Director}    Self, for chaining methods\n   * @todo Replace hooker usage with custom middleware on scene enter.\n   *       e.g. https://gist.github.com/darrenscerri/5c3b3dcbe4d370435cfa\n  */\n  directScene (scene) {\n    this.log.info(`${this.id} now controlling ${scene.id}`)\n    this.directListener(scene.id) //  to control scene's listeners\n    hooker.hook(scene, 'enter', {\n      pre: res => {\n        if (!this._process(res)) return hooker.preempt(false)\n      }\n    })\n    return this\n  }\n}\n\nmodule.exports = Director\n"]}