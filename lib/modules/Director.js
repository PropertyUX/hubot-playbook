// Generated by CoffeeScript 1.12.5
(function() {
  var Base, Director, _, hooker,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  Base = require('./Base');

  hooker = require('hooker');


  /**
   * Control listener and scene enter access, operates as blacklist or whitelist
   * Provide authorise function to allow or deny as fallback for anyone not listed
   * - given the user or room name and response object
   * - return bool to determine access
   * - e.g. pass a function to check if user has a particular role in platform
   * Config keys:
   * - type: whitelist or blacklist (default: whitelist)
   * - scope: user or room (default: user)
   * - deniedReply: sends when denied access
   * - key: string reference for logs, events
   * @param {Robot}    robot       - Hubot Robot instance
   * @param {Function} [authorise] - Function to determine access (as fallback)
   * @param {Object} [options] - Key/val options for config
   * @param {String} [key]     - Key name for this instance
   */

  Director = (function(superClass) {
    extend(Director, superClass);

    function Director() {
      var args, listEnv, opts, ref, ref1, robot;
      robot = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.config = {
        type: 'whitelist',
        scope: 'username',
        deniedReply: process.env.DENIED_REPLY || "Sorry, I can't do that."
      };
      this.authorise = _.isFunction(args[0]) ? args.shift() : void 0;
      opts = _.isObject(args[0]) ? opts = args.shift() : {};
      Director.__super__.constructor.call(this, 'director', robot, opts);
      if ((ref = this.config.type) !== 'whitelist' && ref !== 'blacklist') {
        this.error("Invalid type");
      }
      if ((ref1 = this.config.scope) !== 'username' && ref1 !== 'room') {
        this.error("Invalid scope");
      }
      this.log.info("New " + this.config.scope + " Director " + this.config.type + ": " + this.id);
      listEnv = this.config.type.toUpperCase();
      this.names = (function() {
        switch (this.config.scope) {
          case 'username':
            return process.env[listEnv + "_USERNAMES"];
          case 'room':
            return process.env[listEnv + "_ROOMS"];
        }
      }).call(this);
      if (this.names != null) {
        this.names = this.names.split(',');
      }
      if (this.names == null) {
        this.names = [];
      }
    }


    /**
     * Add new usernames/rooms to list
     * @param  {String|Array} names - Usernames or Room names (depending on scope)
     * @return {Director}           - Self, for chaining methods
     */

    Director.prototype.add = function(names) {
      this.log.info("Adding " + (names.toString()) + " to " + this.id + " " + this.config.type);
      this.names = _.union(this.names, _.castArray(names));
      return this;
    };


    /**
     * Remove new usernames/rooms from list
     * @param  {String|Array} names - Usernames or Room names (depending on scope)
     * @return {Director}           - Self, for chaining methods
     */

    Director.prototype.remove = function(names) {
      this.log.info("Removing " + (names.toString()) + " from " + this.id + " " + this.config.type);
      this.names = _.without.apply(_, [this.names].concat(slice.call(_.castArray(names))));
      return this;
    };


    /**
     * Determine if user has access, checking usernames/rooms against lists
     * Blacklist blocks names on list, let anyone else through
      * Whitelist lets names on list through, block anyone else
     * @param  {Response} res - Hubot Response object
     * @return {Boolean}      - Access allowed
     */

    Director.prototype.isAllowed = function(res) {
      var name;
      name = (function() {
        switch (this.config.scope) {
          case 'username':
            return res.message.user.name;
          case 'room':
            return res.message.room;
        }
      }).call(this);
      if (this.config.type === 'blacklist') {
        if (indexOf.call(this.names, name) >= 0) {
          return false;
        }
        if (this.authorise == null) {
          return true;
        }
      } else {
        if (indexOf.call(this.names, name) >= 0) {
          return true;
        }
        if (this.authorise == null) {
          return false;
        }
      }
      if (this.authorise != null) {
        return this.authorise(name, res);
      }
    };


    /**
     * Process access or denial (either silently or with reply, as configured)
     * @param  {Response} res - Hubot Response object
     * @return {Boolean}      - Access allowed
     */

    Director.prototype.process = function(res) {
      var allowed, message, ref, user;
      allowed = this.isAllowed(res);
      user = res.message.user.name;
      message = res.message.text;
      if (allowed) {
        this.log.debug(this.id + " allowed " + user + " on receiving " + message);
        this.emit('allow', res);
        return true;
      } else {
        this.log.info(this.id + " denied " + user + " on receiving: " + message);
        this.emit('deny', res);
        if ((ref = this.config.deniedReply) !== '' && ref !== null) {
          res.reply(this.config.deniedReply);
        }
        return false;
      }
    };


    /**
     * Let this director control access to any listener matching regex
     * @param  {Regex}  regex - Listener match pattern
     * @return {Director}     - Self, for chaining methods
     */

    Director.prototype.directMatch = function(regex) {
      this.log.info(this.id + " now controlling access to listeners matching " + regex);
      this.robot.listenerMiddleware((function(_this) {
        return function(context, next, done) {
          var isDenied, isMatch, res;
          res = context.response;
          isMatch = res.message.text.match(regex);
          isDenied = !_this.process(res);
          if (isMatch && isDenied) {
            res.message.finish();
            return done();
          }
          return next(done);
        };
      })(this));
      return this;
    };


    /**
     * Let this director control access to a listener by listener or scene ID
     * If multiple listeners use the same ID, it's assumed to deny all of them
     * @param  {String}   id - ID of listener (may be multiple for scene)
     * @return {Director}    - Self, for chaining methods
     */

    Director.prototype.directListener = function(id) {
      this.log.info("Director " + this.id + " now controlling access to listener " + id);
      this.robot.listenerMiddleware((function(_this) {
        return function(context, next, done) {
          var isDenied, isMatch, res;
          res = context.response;
          isMatch = context.listener.options.id === id;
          isDenied = !_this.process(res);
          if (isMatch && isDenied) {
            context.response.message.finish();
            return done();
          }
          return next(done);
        };
      })(this));
      return this;
    };


    /**
     * Let this director control access to a given scene's listener
     * Hooks into .enter method to control access for manually entered scenes
     * @param  {Scene} scene - The Scene instance
     * @return {Director}    - Self, for chaining methods
     * TODO: replace hooker usage with new Hubot.Middleware on scene enter
     */

    Director.prototype.directScene = function(scene) {
      this.log.info(this.id + " now controlling " + scene.id);
      this.directListener(scene.id);
      hooker.hook(scene, 'enter', {
        pre: (function(_this) {
          return function(res) {
            if (!_this.process(res)) {
              return hooker.preempt(false);
            }
          };
        })(this)
      });
      return this;
    };

    return Director;

  })(Base);

  module.exports = Director;

}).call(this);
